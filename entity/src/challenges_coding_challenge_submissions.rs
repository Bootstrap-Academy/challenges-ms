//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "challenges_coding_challenge_submissions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub subtask_id: Uuid,
    pub creator: Uuid,
    pub creation_timestamp: DateTime,
    #[sea_orm(column_type = "Text")]
    pub environment: String,
    #[sea_orm(column_type = "Text")]
    pub code: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::challenges_coding_challenge_result::Entity")]
    ChallengesCodingChallengeResult,
    #[sea_orm(
        belongs_to = "super::challenges_coding_challenges::Entity",
        from = "Column::SubtaskId",
        to = "super::challenges_coding_challenges::Column::SubtaskId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChallengesCodingChallenges,
}

impl Related<super::challenges_coding_challenge_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesCodingChallengeResult.def()
    }
}

impl Related<super::challenges_coding_challenges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesCodingChallenges.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
