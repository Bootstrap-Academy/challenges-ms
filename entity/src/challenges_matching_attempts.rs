//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "challenges_matching_attempts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub matching_id: Uuid,
    pub user_id: Uuid,
    pub timestamp: DateTime,
    pub solved: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::challenges_matchings::Entity",
        from = "Column::MatchingId",
        to = "super::challenges_matchings::Column::SubtaskId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChallengesMatchings,
}

impl Related<super::challenges_matchings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesMatchings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
