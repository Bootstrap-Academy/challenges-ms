//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use super::sea_orm_active_enums::JobsJobType;
use super::sea_orm_active_enums::JobsProfessionalLevel;
use super::sea_orm_active_enums::JobsSalaryPer;
use super::sea_orm_active_enums::JobsSalaryUnit;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "jobs_jobs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub company_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    #[sea_orm(column_type = "Text")]
    pub location: String,
    pub remote: bool,
    pub job_type: JobsJobType,
    pub responsibilities: Vec<String>,
    pub professional_level: JobsProfessionalLevel,
    pub salary_min: i32,
    pub salary_max: i32,
    pub salary_unit: JobsSalaryUnit,
    pub salary_per: JobsSalaryPer,
    #[sea_orm(column_type = "Text")]
    pub contact: String,
    pub last_update: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::jobs_companies::Entity",
        from = "Column::CompanyId",
        to = "super::jobs_companies::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    JobsCompanies,
    #[sea_orm(has_many = "super::jobs_skill_requirements::Entity")]
    JobsSkillRequirements,
}

impl Related<super::jobs_companies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JobsCompanies.def()
    }
}

impl Related<super::jobs_skill_requirements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JobsSkillRequirements.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
