//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "challenges_challenges")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub task_id: Uuid,
    pub category_id: Uuid,
    pub skill_ids: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::challenges_challenge_categories::Entity",
        from = "Column::CategoryId",
        to = "super::challenges_challenge_categories::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChallengesChallengeCategories,
    #[sea_orm(
        belongs_to = "super::challenges_tasks::Entity",
        from = "Column::TaskId",
        to = "super::challenges_tasks::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChallengesTasks,
}

impl Related<super::challenges_challenge_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesChallengeCategories.def()
    }
}

impl Related<super::challenges_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesTasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
