//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "challenges_course_tasks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub task_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub course_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub section_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub lecture_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::challenges_tasks::Entity",
        from = "Column::TaskId",
        to = "super::challenges_tasks::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChallengesTasks,
}

impl Related<super::challenges_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChallengesTasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
